// –ë–µ–ª–µ–∂–∫–∞: –∏–º–µ—Ç–æ –Ω–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Ç—Ä—è–±–≤–∞ –¥–∞ —Å–µ –∫–∞–∑–≤–∞ "solution". –ê–∫–æ –Ω–µ —Å–µ –∫–∞–∑–≤–∞ —Ç–∞–∫–∞, –ø—Ä–æ–º–µ–Ω–µ—Ç–µ –≥–æ –Ω–∞
// —Ç–µ–∑–∏ –¥–≤–∞ —Ä–µ–¥–∞:
extern crate solution;
use solution::TextInfo;

#[test]
fn test_char_count() {
    let t = TextInfo::new("123456789");
    assert_eq!(9, t.char_count());
}

#[test]
fn test_unicode_char_count() {
    let t = TextInfo::new("abcd-–∞–±–≤–≥");
    assert_eq!(4 + 1 + 4, t.char_count());
}

#[test]
fn test_alpha_count() {
    let t = TextInfo::new(" AbCd-–ê–±–í–≥- ");
    assert_eq!(4 + 4, t.alphabetic_count());
}

#[test]
fn test_alpha_count_2() {
    let t = TextInfo::new("1. one, 2) –¥–≤–µ, 3-> three");
    assert_eq!(3 + 3 + 5, t.alphabetic_count());
}

#[test]
fn test_cyrillic_letter_count() {
    let t = TextInfo::new("—é—è-1-abc-–ê–±–í–≥");
    assert_eq!(2 + 4, t.cyrillic_letter_count());
}

#[test]
fn test_latin_letter_count() {
    let t = TextInfo::new("abc-–∞–±–≤–≥-XYZ");
    assert_eq!(3 + 3, t.latin_letter_count());
}

#[test]
fn test_word_count() {
    let t = TextInfo::new("  –ù–∞ –±–∞–±–∞ –º–∏ —Ö–≤—ä—Ä—á–∏–ª–æ—Ç–æ! ");
    assert_eq!(4, t.word_count());
}

#[test]
fn test_word_count_2() {
    let t = TextInfo::new("–ó–¥—Ä–∞–≤–µ–π, –∫–∞–∫ —Å–∏, –ø—Ä–∏—è—Ç–µ–ª—é? –ö–∞–∫, –¥–æ–±—Ä–µ –ª–∏ —è –∫–∞—Ä–∞—à?");
    assert_eq!(9, t.word_count());
}

#[test]
fn test_word_count_3() {
    let t = TextInfo::new("–î–∞ –≤–∏–¥–∏–º –∫–æ–π –µ –ø–æ-–ø–æ-–Ω–∞–π!");
    assert_eq!(7, t.word_count());
}

#[test]
fn test_empty_string() {
    let t = TextInfo::new("");
    assert_eq!(0, t.char_count());
    assert_eq!(0, t.alphabetic_count());
    assert_eq!(0, t.latin_letter_count());
    assert_eq!(0, t.cyrillic_letter_count());
    assert_eq!(0, t.word_count());
    assert_eq!(0, t.sentence_count());
    assert_eq!("üòê", t.emotion());
}

#[test]
fn test_sentence_count() {
    let t = TextInfo::new("–ë–∞–±–∞ —Ç–∏ —Å–∞–º–æ Rust –µ –ø–∏—Å–∞–ª–∞ 1 –≤—Ä–µ–º–µ. Assembly language, uphill 2 ways! –ö–≤–∏ —Å–∞ —Ç–∏—è –Ω–µ—Å–µ—Ä–∏–æ–∑–Ω–∏ –Ω–µ—â–∞? –ê–º–∞—Ö–∞.");
    assert_eq!(4, t.sentence_count());
}

#[test]
fn test_sentence_count_2() {
    let t = TextInfo::new("–î–∞ –≤–∏–¥–∏–º —Å–µ–≥–∞: —Å–ª–µ–¥–≤–∞—Ç –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç–∏—Ç–µ —É–∫–∞–∑–∞–Ω–∏—è; –©–µ –∏–≥–Ω–æ—Ä–∏—Ä–∞—Ç –ª–∏ -- —Ç–∞–∑–∏ -- –ø—É–Ω–∫—Ç—É–∞—Ü–∏—è?");
    assert_eq!(1, t.sentence_count());
}

#[test]
fn test_triple_dots_count() {
    let t = TextInfo::new("Somewhere... Over the rainbow...");
    assert_eq!(2, t.sentence_count());
}

#[test]
fn test_emotions() {
    let t = TextInfo::new("Explosion! WOOO!");
    assert_eq!("üòÆ", t.emotion());

    let t = TextInfo::new("Wtf? What do?");
    assert_eq!("ü§î", t.emotion());

    let t = TextInfo::new("Bang! Wait. What?");
    assert_eq!("üòê", t.emotion());
}

#[test]
fn test_emotions_repeated_punctuation() {
    let t = TextInfo::new("Explosion!! WOO! hey????");
    assert_eq!("üòÆ", t.emotion());

    let t = TextInfo::new("Wtf?? Wat? What do!!!!");
    assert_eq!("ü§î", t.emotion());

    let t = TextInfo::new("Bang! Wait... What?");
    assert_eq!("üòê", t.emotion());
}
